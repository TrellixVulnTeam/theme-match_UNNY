{"ast":null,"code":"import { Observable } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/database\";\nconst letters = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"];\nexport let DataService = /*#__PURE__*/(() => {\n  class DataService {\n    constructor(db) {\n      this.db = db;\n      this.party = {};\n      this.db.object('themes/').valueChanges().subscribe(theme => {\n        if (theme) this.party = theme;\n      });\n    }\n\n    getRandomOption(code, name) {\n      if (!this.party[code]) {\n        return \"+-\";\n      }\n\n      var people = [];\n      Object.keys(this.party[code].people).forEach(prop => {\n        people.push(this.party[code].people[prop]);\n      });\n\n      if (people.indexOf(name.toLowerCase()) != -1) {\n        return \"--\";\n      }\n\n      if (!this.party[code].options) {\n        return \"++\";\n      }\n\n      var keys = [];\n      Object.keys(this.party[code].options).forEach(prop => {\n        keys.push(prop);\n      });\n      var ind = keys[Math.ceil(Math.random() * keys.length) - 1];\n      var str = this.party[code].options[ind];\n      this.db.list('themes/' + code + '/options').remove(\"\" + ind);\n      this.db.list('themes/' + code + '/people').push(name.toLowerCase());\n      return str;\n    }\n\n    createThemeList(themes) {\n      var code = \"\";\n\n      for (var i = 0; i < 8; i++) {\n        code += letters[Math.ceil(Math.random() * letters.length) - 1];\n      }\n\n      this.db.object('themes/' + code).set({\n        options: themes,\n        people: [\"\"]\n      });\n      return code;\n    }\n\n    handleError(error) {\n      console.error('server error:', error);\n\n      if (error.error instanceof Error) {\n        const errMessage = error.error.message;\n        return Observable.throw(errMessage); // Use the following instead if using lite-server\n        // return Observable.throw(err.text() || 'backend server error');\n      }\n\n      return Observable.throw(error || 'Node.js server error');\n    }\n\n  }\n\n  DataService.ɵfac = function DataService_Factory(t) {\n    return new (t || DataService)(i0.ɵɵinject(i1.AngularFireDatabase));\n  };\n\n  DataService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DataService,\n    factory: DataService.ɵfac,\n    providedIn: 'root'\n  });\n  return DataService;\n})();","map":null,"metadata":{},"sourceType":"module"}