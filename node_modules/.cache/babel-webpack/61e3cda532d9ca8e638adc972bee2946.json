{"ast":null,"code":"import { Observable, Subject } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/database\";\nconst letters = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"];\nexport class DataService {\n  constructor(db) {\n    this.db = db;\n  }\n\n  getRandomOption(code, name) {\n    var _a;\n\n    var party = {\n      options: [\"option1\", \"option2\"],\n      people: [\"\", \"alicia\", \"bremer\"]\n    };\n    console.log(\"getRandomOption\");\n    console.log(party);\n    var checkName$ = new Subject();\n    var queryObservable = checkName$.pipe(switchMap(checkName => this.db.list('themes/' + code + '/people', ref => checkName ? ref.equalTo(checkName) : ref).valueChanges())); // trigger the query\n\n    checkName$.next(name);\n\n    if (((_a = checkName$ | async) === null || _a === void 0 ? void 0 : _a.length) == 0 > 0) {\n      return \"--\";\n    }\n\n    this.db.list('/items', ref => ref.orderByChild('size').equalTo('large'));\n    var ind = Math.ceil(Math.random() * party.options.length) - 1;\n    var str = party.options.splice(ind, 1);\n    this.db.list('themes/' + code + '/options').remove(\"\" + ind);\n    this.db.list('themes/' + code + '/people').push(name);\n    return str[0];\n  }\n\n  createThemeList(themes) {\n    var code = \"\";\n\n    for (var i = 0; i < 8; i++) {\n      code += letters[Math.ceil(Math.random() * letters.length) - 1];\n    }\n\n    this.db.object('themes/' + code).set({\n      options: themes,\n      people: [\"\"]\n    });\n    return code;\n  }\n\n  handleError(error) {\n    console.error('server error:', error);\n\n    if (error.error instanceof Error) {\n      const errMessage = error.error.message;\n      return Observable.throw(errMessage); // Use the following instead if using lite-server\n      // return Observable.throw(err.text() || 'backend server error');\n    }\n\n    return Observable.throw(error || 'Node.js server error');\n  }\n\n}\n\nDataService.ɵfac = function DataService_Factory(t) {\n  return new (t || DataService)(i0.ɵɵinject(i1.AngularFireDatabase));\n};\n\nDataService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DataService,\n  factory: DataService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/home/alicia/dev/angular/theme-picker/src/app/core/data.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { isNgTemplate } from '@angular/compiler';\nimport { Injectable } from '@angular/core';\nimport { AngularFireDatabase, AngularFireList, AngularFireObject, AngularFireAction } from '@angular/fire/database';\n\nimport { Observable, Subscription, Subject } from 'rxjs';\nimport { map, catchError, switchMap } from 'rxjs/operators';\n\nimport { IThemes } from '../shared/interfaces';\n\nconst letters: string[] = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\",\n                          \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"];\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataService \n{\n\n  constructor(private db: AngularFireDatabase ) { }\n\n  getRandomOption(code: string, name: string) :  string\n  {\n\n    var party: IThemes = {\n      options: [\n        \"option1\",\n        \"option2\"\n      ],\n      people: [\n        \"\",\n        \"alicia\",\n        \"bremer\"\n      ]\n    };\n\n    console.log(\"getRandomOption\");\n    console.log(party);\n\n    var checkName$ : Subject<string> = new Subject<string>();\n    var queryObservable = checkName$.pipe(\n      switchMap(checkName => \n        this.db.list('themes/' + code + '/people', ref => \n          checkName ? ref.equalTo(checkName) : ref).valueChanges()\n      )\n    );\n\n    // trigger the query\n    checkName$.next(name);\n\n\n    \n    if ((checkName$ | async)?.length==0 > 0)\n    {\n      return \"--\";\n    }\n\n    this.db.list('/items', ref => ref.orderByChild('size').equalTo('large'))\n\n    var ind:number = Math.ceil(Math.random()*party.options.length)-1;\n\n    var str: string[] = party.options.splice(ind, 1);\n\n    this.db.list('themes/' + code + '/options').remove(\"\"+ind);\n\n    this.db.list('themes/' + code + '/people').push(name);\n\n    return str[0];\n  }\n\n  createThemeList(themes: string[]) :  string\n  {\n    var code: string = \"\";\n\n    for (var i:number = 0; i < 8; i++)\n    {\n      code += letters[Math.ceil(Math.random()*letters.length)-1];\n    }\n\n    this.db.object('themes/' + code).set({\n      options: themes,\n      people:[\"\"]\n    });\n\n    return code;\n  }\n\n  private handleError(error: any) \n    {\n      console.error('server error:', error);\n      if (error.error instanceof Error) {\n          const errMessage = error.error.message;\n          return Observable.throw(errMessage);\n          // Use the following instead if using lite-server\n          // return Observable.throw(err.text() || 'backend server error');\n      }\n      return Observable.throw(error || 'Node.js server error');\n    }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}