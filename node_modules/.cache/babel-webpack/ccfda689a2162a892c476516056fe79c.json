{"ast":null,"code":"import { Observable } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/database\";\nexport let DataService = /*#__PURE__*/(() => {\n  class DataService {\n    constructor(db) {\n      this.db = db;\n    }\n\n    getOptions() {\n      var items;\n      items = this.db.list('options').snapshotChanges().pipe(map(s => {\n        let listOf = [];\n        s.map(str => {\n          //console.log(\"getting template \");\n          //console.log(t.payload.val());\n          //console.log(JSON.parse(t.payload.val()));\n          let newStr = str.payload.val();\n          listOf.push(newStr);\n        });\n        return listOf;\n      }), catchError(this.handleError));\n      return items;\n    }\n\n    getSelected() {\n      var items;\n      items = this.db.list('selected').snapshotChanges();\n      items.subscribe(res => console.log(res));\n      return items;\n    }\n\n    addToSelected(val) {\n      var itemsRef = this.db.list('selected').push(val);\n    }\n\n    handleError(error) {\n      console.error('server error:', error);\n\n      if (error.error instanceof Error) {\n        const errMessage = error.error.message;\n        return Observable.throw(errMessage); // Use the following instead if using lite-server\n        // return Observable.throw(err.text() || 'backend server error');\n      }\n\n      return Observable.throw(error || 'Node.js server error');\n    }\n\n  }\n\n  DataService.ɵfac = function DataService_Factory(t) {\n    return new (t || DataService)(i0.ɵɵinject(i1.AngularFireDatabase));\n  };\n\n  DataService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DataService,\n    factory: DataService.ɵfac,\n    providedIn: 'root'\n  });\n  return DataService;\n})();","map":null,"metadata":{},"sourceType":"module"}